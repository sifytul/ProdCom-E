openapi: 3.0.0
info:
  version: 1.0.0
  title: ProdCom-E API
  description: An e-commerce website to deliver best and authentic gadget items.
  contact:
    name: Md. Sifytul Karim
    email: sifytul09@gmail.com

tags:
  - name: Auth
    description: Authentication Endpoints (public + private)
  - name: User
    description: User Endpoints (private)
  - name: Products
    description: Products Endpoints (public + private)
  - name: Reviews
    description: Reviews Endpoints(public + private)
  - name: Orders
    description: Orders Endpoints(private)
  - name: Cart
    description: Cart Endpoints (private)
  - name: Payment
    description: Payment Endpoints (private)

servers:
  - description: localhost
    url: http://localhost:4000

paths:
  # Auth Endpoints
  '/health':
    get:
      description: Check the health of api
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Api is running
  '/auth/register':
    post:
      tags: [Auth]
      description: This route will create a user with provided payload
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Sifytul Karim'
                email:
                  type: string
                  example: sifytul@example.com
                  format: email
                password:
                  type: string
                  example: password123
                  format: password
              required: [name, email, password]

      responses:
        '201':
          description: registered a new user
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int32
                        example: 1
                      name:
                        type: string
                        example: Sifytul Karim
                      email:
                        type: string
                        example: sifytul@example.com
                      role:
                        type: string
                        example: user
        '400':
          description: Bad request
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: email
                        message:
                          type: string
                          example: Field can't be empty
        '409':
          description: 'duplicate value'
          $ref: '#/components/responses/409'
  '/auth/signin':
    post:
      tags: [Auth]
      description: This route will log in a user to the website
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: sifytul@example.com
                password:
                  type: string
                  example: password123
              required: [email, password]

      responses:
        '200':
          description: login success
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Sifytul Karim
                      email:
                        type: string
                        example: sifytul@example.com
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'
  '/auth/password/forgot':
    post:
      tags: ['Auth']
      security:
        - bearerAuth: []
      description: This route will help a user to reset his password if he has an account on this website with the provided email.
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: sifytul@example.com
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Sent an email with reset link if the email is valid. Check your inbox
  '/auth/password/reset/{token}':
    post:
      tags: [Auth]
      security:
        - bearerAuth: []
      description: This route will reset the password of the particular user.
      parameters:
        - $ref: '#/components/parameters/tokenParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password123
                  minLength: 8
              required: [password]
      responses:
        '201':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: validation error response
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: password
                    error:
                      type: string
                      example: password can't be less than 8 characters.
  '/auth/refresh-token':
    get:
      tags: [Auth]
      description: retrive access token by providing httponly refresh token
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

        '401':
          $ref: '#/components/responses/401'
  '/auth/logout':
    post:
      tags: [Auth]
      security:
        - bearerAuth: []

      description: This route will logout the user
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: ''
        '401':
          $ref: '#/components/responses/401'

  # User - Me Endpoints
  '/me':
    get:
      description: This will retrieve the profile data based on the provided token.
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User data
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Sifytul Karim
                      email:
                        type: string
                        example: sifytul@example.com
                      avatar:
                        type: string
                        example: s3.avatar.jpeg
                      role:
                        type: string
                        example: user
                      userSince:
                        type: string
                        example: 2023-10-13T09:25:14.836Z
  '/me/password/update':
    patch:
      tags: [User]
      security:
        - bearerAuth: []
      description: This route will update the password
      requestBody:
        description: take old and new password
        content:
          'application/json':
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: password123
                newPassword:
                  type: string
                  example: newpassword123
                  minLength: 8
                wantToLogOutFromOtherDevices:
                  type: boolean
                  example: false
              required: [oldPassword, newPassword]
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password successfully changed.
        '400':
          description: wrong old password or new password validation error
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: wrong password
        '401':
          $ref: '#/components/responses/401'
  '/me/update':
    patch:
      description: This route will update the name or avatar of the user.
      tags: [User]
      security:
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Name
                avatar:
                  type: string
                  example: s3.fdfjdlfr.jpg
      responses:
        '204':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: requested field successfully changed.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'

  # User - Admin endpoints
  '/admin/users':
    get:
      tags: [User]
      security:
        - bearerAuth: []
      description: Retrieve all users list. Admin only
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sordTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'

      responses:
        '200':
          description: list of users
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  users:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/User'

        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags: [User]
      description: This route will create a user with provided payload by admin
      security:
        - bearerAuth: []

      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Sifytul Karim'
                email:
                  type: string
                  example: sifytul@example.com
                  format: email
                password:
                  type: string
                  example: password123
                  format: password
              required: [name, email, password]

      responses:
        '201':
          description: registered a new user
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: email
                        message:
                          type: string
                          example: Field can't be empty
        '409':
          $ref: '#/components/responses/409'
  '/admin/users/{id}':
    get:
      tags: [User]
      security:
        - bearerAuth: []
      description: Retrieve a single user's data
      parameters:
        - in: path
          name: id
          required: true
          description: user id
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: detailes of a single user
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    patch:
      tags: [User]
      security:
        - bearerAuth: []
      description: update any user data
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [user, admin]
                  example: user
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: role changed successfully

        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    delete:
      tags: [User]
      security:
        - bearerAuth: []
      description: This route will delete a user
      parameters:
        - in: path
          name: id
          required: true
          description: user id
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: success delete response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully deleted user with id 2
        '400':
          description: not found error
          content:
            'application/json':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                  error:
                    type: string
                    example: Bad Request
                  statusCode:
                    type: integer
                    example: 400
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # Products Endpoints
  '/products': &all_products_endpoint
    get:
      description: This route will retrieve all the products
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/categoryParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sordTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          description: retrieve all articles based on the query param
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        sku:
                          type: string
                          example: abccd-11
                        name:
                          type: string
                          example: Macbook Pro
                        image_url:
                          type: string
                          example: s3.productimage.jpeg
                        price:
                          type: number
                          example: 499.99
                        ratings:
                          type: number
                          example: 4.8
                        stock:
                          type: integer
                          example: 20
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /products/2
        '500':
          $ref: '#/components/responses/500'
  '/products/{id}':
    get:
      description: Retrieve single product by id
      tags:
        - Products
      parameters:
        - $ref: '#/components/parameters/productIdParam'
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      sku:
                        type: string
                        example: abccd-11
                      name:
                        type: string
                        example: Macbook Pro
                      description:
                        type: string
                        example: This is an awesome product
                      variant:
                        type: string
                        example: China
                      colors:
                        type: array
                        example:
                          - blue
                          - white
                      sizes:
                        type: string
                        example:
                      image_urls:
                        type: array
                        example:
                          - s3.productimage.jpeg
                          - s3.secondimage.jpeg
                      price:
                        type: number
                        example: 499.99
                      ratings:
                        type: number
                        example: 4.8
                      stock:
                        type: integer
                        example: 20
                      reviews:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Review'
                            - $ref: '#/components/schemas/Timestamp'
        '404':
          $ref: '#/components/responses/404'

  # Products - Admin Endpoints
  '/admin/products': *all_products_endpoint
  '/admin/products/new':
    post:
      description: This route will create a product with provided payload.
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        description: product payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: xiaomi airdot 6
                description:
                  type: string
                  example: Details description of the product
                price:
                  type: number
                  example: 29.99
                image_urls:
                  type: array
                  example:
                    - s3.firstimage.jpeg
                    - s3.secondimage.jpeg
                category:
                  type: string
                  example: phone
                stock:
                  type: integer
                  example: 30
              required:
                - name
                - description
                - price
                - image_urls
                - category

      responses:
        '201':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully added
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/admin/products/{id}':
    patch:
      description: This route will update a product based on productId
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/productIdParam'
      requestBody:
        description: product update payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: xiaomi airdot 6
                description:
                  type: string
                  example: Details description of the product
                price:
                  type: number
                  example: 29.99
                image_urls:
                  type: array
                  example:
                    - s3.firstimage.jpeg
                    - s3.secondimage.jpeg
                category:
                  type: string
                  example: phone
                stock:
                  type: integer
                  example: 30
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      description: This route will remove temporarily a product based on productId
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/productIdParam'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/admin/products/soft-deleted':
    get:
      description: This route will retrieve all the soft deleted products.
      tags:
        - Products
      security:
        - bearerAuth: []
      responses:
        '200':
          description: retrieve all soft deleted products
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        sku:
                          type: string
                          example: abccd-11
                        name:
                          type: string
                          example: Macbook Pro
                        description:
                          type: string
                          example: This is an awesome product
                        variant:
                          type: string
                          example: China
                        image_urls:
                          type: array
                          example:
                            - s3.productimage.jpeg
                            - s3.secondimage.jpeg
                        price:
                          type: number
                          example: 499.99
                        ratings:
                          type: number
                          example: 4.8
                        stock:
                          type: integer
                          example: 20
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            category_name:
                              type: string
                              example: phone
                            description:
                              type: string
                              example: This is a phone category.
                            image_url:
                              type: string
                              example: s3.categoryimage.jpeg
                        deleted_at:
                          type: string
                          example: 2023-10-13T09:25:14.836Z
                        created_at:
                          type: string
                          example: 2023-10-13T09:25:14.836Z
                        updated_at:
                          type: string
                          example: 2023-10-13T09:25:14.836Z
                        links:
                          type: object
                          properties:
                            self:
                              type: string
                              example: /products/2
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/admin/products/{id}/restore':
    patch:
      description: This route will restore a soft deleted product based on productId.
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/productIdParam'
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully restored
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  # Category
  '/categories':
    get:
      description: This route will retrieve all the categories
      tags:
        - Category
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            category_name:
                              type: string
                              example: phone
                            description:
                              type: string
                              example: This is a phone category.
                            image_url:
                              type: string
                              example: s3.categoryimage.jpeg
                        - $ref: '#/components/schemas/Timestamp'
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example: /categories/1
        '500':
          $ref: '#/components/responses/500'

  # Category - Admin Endpoints
  '/admin/categories':
    post:
      tags:
        - Category
      description: This route will create a category with provided payload.
      security:
        - bearerAuth: []
      requestBody:
        description: category payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                category_name:
                  type: string
                  example: phone
                description:
                  type: string
                  example: This is a phone category.
              required:
                - category_name
      responses:
        '201':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: category successfully created

        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/admin/categories/{id}':
    patch:
      tags:
        - Category
      description: This route will update a category based on categoryId
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryIdParam'
      requestBody:
        description: category update payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                category_name:
                  type: string
                  example: phone
                description:
                  type: string
                  example: This is a phone category.
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Category
      description: This route will delete a category based on categoryId
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryIdParam'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  # Reviews Endpoints
  '/products/{id}/reviews':
    get:
      tags:
        - Reviews
      description: Retrieve all reviews of an individual product
      parameters:
        - $ref: '#/components/parameters/productIdParam'
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Review'
                        - $ref: '#/components/schemas/Timestamp'
    post:
      tags:
        - Reviews
      description: Post a review on individual product
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/productIdParam'
      requestBody:
        description: review payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: nice product
                rating:
                  type: integer
                  example: 5
                  minimum: 0
                  maximum: 5
              required:
                - comment
                - rating
      responses:
        '201':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully posted
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: integer
                            example: 34
                          comment:
                            type: string
                            example: another comment
                          reviewerName:
                            type: string
                            example: Ullah Khan
                          rating:
                            type: integer
                            example: 5
                            minimum: 0
                            maximum: 5
                      - $ref: '#/components/schemas/Timestamp'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/reviews/{id}':
    patch:
      tags:
        - Reviews
      description: update the review
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: review ID
          required: true
          schema:
            type: integer
            example: 3
      requestBody:
        description: update payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: nice product
                rating:
                  type: integer
                  example: 5
                  minimum: 0
                  maximum: 5
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Reviews
      description: This route will delete a review on a specific product based on reviewId and reviewerId
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: review ID
          schema:
            type: integer
            example: 34
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: if the reviewer tries to delete another review that is not made by him.
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  # Orders Endpoints
  '/orders/my-orders':
    get:
      tags:
        - Orders
      description: This route will retrieve all the orders of logged in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              example: 343
                            status:
                              type: string
                              enum:
                                - pending
                                - cancelled
                                - confirmed
                                - processing
                                - shipping
                                - delivered
                              example: pending
                            totalItems:
                              type: integer
                              example: 32
                            totalPrice:
                              type: number
                              example: 32.32
                            paymentInfo:
                              type: string
                              enum:
                                - cod
                                - paid
                              example: cod

                            probableDeliveryDate: #if not delivered yet
                              type: string
                              example: 2023-09-26 03:03:00
                            deliveredAt: # if delivered
                              type: string
                              example: 2023-09-26 03:03:00
                        - $ref: '#/components/schemas/Timestamp'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/orders/my-orders/{id}':
    get:
      tags:
        - Orders
      description: This route will retrieve an individual order of logged in user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orderIdParam'
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: integer
                            example: 343
                          status:
                            type: string
                            enum:
                              - pending
                              - processing
                              - shipping
                              - delivered
                            example: pending
                          orderedItems:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: samsung a71
                                image:
                                  type: string
                                  example: s3.firstimage.jpeg
                                price:
                                  type: number
                                  example: 32.32
                                quantity:
                                  type: integer
                                  example: 2
                                subTotal:
                                  type: number
                                  example: 32.32
                          totalItems:
                            type: integer
                            example: 5
                          itemsPrice:
                            type: number
                            example: 32.32
                          shippingPrice:
                            type: number
                            example: 32.32
                          totalPrice:
                            type: number
                            example: 32.32
                          paymentInfo:
                            type: string
                            enum:
                              - cod
                              - paid
                            example: cod
                          probableDeliveryDate: #if not delivered yet
                            type: string
                            example: 2023-09-26 03:03:00
                          deliveredAt: # if delivered
                            type: string
                            example: 2023-09-26 03:03:00
                          shippingAddress:
                            $ref: '#/components/schemas/Address'

                      - $ref: '#/components/schemas/Timestamp'

        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - Orders
      description: Edit / coupon apply / cancel or confirm the order by providing payment information (cod or paid) within 30 min. After 30 min the order will be deleted automatically.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orderIdParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - edit products
                    - coupon_apply
                    - order_confirm_or_cancel
                  example: order_confirm_or_cancel
                data:
                  type: object
                  properties:
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          productId:
                            type: integer
                            example: 432
                          quantity:
                            type: integer
                            example: 2
                    coupon:
                      type: string
                      example: sifat324d
                    status:
                      type: string
                      example: cancelled
                    payment:
                      type: string
                      example: cod
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Orders
      description: This route will delete an individual order of logged in user within 1 hour.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orderIdParam'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/orders/my-orders/{id}/reorder':
    put:
      tags:
        - Orders
      description: This route will reorder a previously canceled order.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orderIdParam'
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - edit products
                    - coupon_apply
                    - order_confirm
                  example: order_confirm
                data:
                  type: object
                  properties:
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          productId:
                            type: integer
                            example: 432
                          quantity:
                            type: integer
                            example: 2
                    coupon:
                      type: string
                      example: sifat324d
                    status:
                      type: string
                      example: confirmed
                    payment:
                      type: string
                      example: cod
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/orders/new':
    post: &create_order
      tags:
        - Orders
      description: This route will create an order.
      security:
        - bearerAuth: []
      requestBody:
        description: order payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                        example: 432
                      quantity:
                        type: integer
                        example: 2
                coupon:
                  type: string
                  example: sifat324d
                shipping_info:
                  type: object
                  properties:
                    address:
                      type: string
                      example: 123, abc road, dhaka
                    city:
                      type: string
                      example: dhaka
                    postal_code:
                      type: string
                      example: 1207
                    country:
                      type: string
                      example: Bangladesh
                    contact:
                      type: object
                      properties:
                        phone:
                          type: string
                          example: +8801700000000

      responses:
        '201':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully created the order
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  # Orders - Admin Endpoints
  '/admin/orders':
    get:
      tags:
        - Orders
      description: This route will retrieve all the orders of logged in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              example: 343
                            status:
                              type: string
                              enum:
                                - pending
                                - cancelled
                                - confirmed
                                - processing
                                - shipping
                                - delivered
                              example: pending
                            totalItems:
                              type: integer
                              example: 32
                            totalPrice:
                              type: number
                              example: 32.32
                            paymentInfo:
                              type: string
                              enum:
                                - cod
                                - paid
                              example: cod

                            probableDeliveryDate: #if not delivered yet
                              type: string
                              example: 2023-09-26 03:03:00
                            deliveredAt: # if delivered
                              type: string
                              example: 2023-09-26 03:03:00
                            user:
                              $ref: '#/components/schemas/User'
                        - $ref: '#/components/schemas/Timestamp'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post: *create_order
  '/admin/orders/{id}':
    get:
      tags:
        - Orders
      description: This route will retrieve an individual order of logged in user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orderIdParam'
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: integer
                            example: 343
                          status:
                            type: string
                            enum:
                              - pending
                              - processing
                              - shipping
                              - delivered
                            example: pending
                          orderedItems:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: samsung a71
                                image:
                                  type: string
                                  example: s3.firstimage.jpeg
                                price:
                                  type: number
                                  example: 32.32
                                quantity:
                                  type: integer
                                  example: 2
                                subTotal:
                                  type: number
                                  example: 32.32
                          totalItems:
                            type: integer
                            example: 5
                          itemsPrice:
                            type: number
                            example: 32.32
                          shippingPrice:
                            type: number
                            example: 32.32
                          totalPrice:
                            type: number
                            example: 32.32
                          paymentInfo:
                            type: string
                            enum:
                              - cod
                              - paid
                            example: cod
                          probableDeliveryDate: #if not delivered yet
                            type: string
                            example: 2023-09-26 03:03:00
                          deliveredAt: # if delivered
                            type: string
                            example: 2023-09-26 03:03:00
                          shippingAddress:
                            $ref: '#/components/schemas/Address'

                          user:
                            $ref: '#/components/schemas/User'
                      - $ref: '#/components/schemas/Timestamp'

        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      description: will update certain fields like order status, probableDeliveryDate, quantity, shippingPrice, shippingAddress
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        description: upload payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: processing
                probableDeliveryDate:
                  type: string
                  example: 2023-09-26 03:03:00
                quantity:
                  type: integer
                  example: 2
                shippingPrice:
                  type: number
                  example: 34.32
                shippingAddress:
                  type: string
                  example: 23, uttar madarsha
      responses:
        '200':
          description: success response
          $ref: '#/components/responses/200'
    delete:
      tags:
        - Orders
      description: Delete an order if exists
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orderIdParam'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  # Cart Endpoints
  '/carts/my-cart':
    get:
      tags:
        - Cart
      description: Retrieve all the cart items of logged in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success response
          content:
            'application/json':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 43
                        name:
                          type: string
                          example: BMW umbrella 12 stick
                        price:
                          type: number
                          example: 7.99
                        quantity:
                          type: integer
                          example: 43
                        subTotal:
                          type: number
                          example: 7.99

        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Cart
      description: Add items to the cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/cartItemIdParam'
      requestBody:
        description: cart payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                productId:
                  type: integer
                  example: 343
                quantity:
                  type: integer
                  example: 1
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
    delete:
      tags:
        - Cart
      description: Remove products from the cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/cartItemIdParam'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  # Payment Endpoint
  '/payment/process':
    post:
      tags:
        - Payment
      description: make payment through hitting the external api(stripe or sslCommerce) with the totalPrice calculated from the order. This url will be hit by order route.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success respone from the external api and send back to the order page with payment Details
          content:
            'application/json':
              schema:
                type: object
                properties:
                  transactionId:
                    type: string
                    example: 3dsjfosjskmf
                  paidAmount:
                    type: number
                    example: 43.43
                  medium:
                    type: string
                    example: bKash
                  paidAt:
                    type: string
                    example: 2023-09-26 03:03:00
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

components:
  responses:
    '400':
      description: Bad request
      content:
        'application/json':
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: required field
                    message:
                      type: string
                      example: Field can't be empty
    '409':
      description: Conflict
      content:
        'application/json':
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 409
              message:
                type: string
                example: duplicate email
    '401':
      description: Unauthorized
      content:
        'application/json':
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Please sign in to perform the action.
    '403':
      description: Forbidden
      content:
        'application/json':
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: You are not authorized to see these resources
    '500':
      description: Server error
      content:
        'application/json':
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Internal server Error
    '404':
      description: Resource not found
      content:
        'application/json':
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: not found
    '204':
      description: successful deletion of the resource
      content:
        'application/json':
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Successfully performed the delete action
    '200':
      description: update success response
      content:
        'application/json':
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: successfully updated
  parameters:
    tokenParam:
      in: path
      name: token
      required: true
      description: reset password token
      schema:
        type: string
        example: '6b9d1701-2ff6-4fa2-ac7d-108b196d475f'
    categoryParam:
      in: query
      name: category
      required: false
      description: category
      schema:
        type: string
        example: gadgets
    pageParam:
      in: query
      name: page
      required: false
      description: page no
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      in: query
      name: limit
      required: false
      description: number of users in one page
      schema:
        type: integer
        format: int32
        example: 10
    sordTypeParam:
      in: query
      name: sort_type
      description: how the data will be sorted (asc or desc)
      schema:
        type: string
        enum: [asc, desc]
        example: desc
    sortByParam:
      in: query
      name: sort_by
      description: by which field the users will be sorted(by createdAt or name)
      schema:
        type: string
        enum: [created_at, name]
        example: created_at
    searchParam:
      in: query
      name: search
      description: search term
      schema:
        type: string
        example: sifytul
    productIdParam:
      in: path
      name: id
      required: true
      description: product ID
      schema:
        type: integer
        format: int32
        example: 2
    categoryIdParam:
      in: path
      name: id
      required: true
      description: category ID
      schema:
        type: integer
        format: int32
        example: 2
    orderIdParam:
      in: path
      name: id
      required: true
      description: Order ID
      schema:
        type: integer
        example: 32
    reviewIdParam:
      in: path
      name: id
      required: true
      description: review ID
      schema:
        type: integer
        example: 32
    cartItemIdParam:
      in: path
      name: id
      required: true
      description: cart Item ID
      schema:
        type: integer
        example: 32
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 434
        name:
          type: string
          example: Sifytul Karim
        email:
          type: string
          example: sifytul@example.com
        address:
          $ref: '#/components/schemas/Address'
        contact:
          $ref: '#/components/schemas/ContactInfo'
        avatar:
          type: string
          example: s3.avatar.jpeg
        links:
          type: object
          properties:
            self:
              type: string
              example: /admin/users/3
        orderDetails:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 3
              orderDate:
                type: string
                example: 2023-09-26 03:03:00
              status:
                type: string
                example: processing
              itemsPrice:
                type: integer
                example: 345.34
              links:
                type: object
                properties:
                  self:
                    type: string
                    example: /orders/3
    Review:
      type: object
      properties:
        reviewerId:
          type: integer
          example: 5
        reviewerName:
          type: string
          example: Khan
        comment:
          type: string
          example: Nice Product
        rating:
          type: integer
          example: 5
          minimum: 0
          maximum: 5
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          example: '2023-9-3 03:03:00'
        updatedAt:
          type: string
          example: '2023-9-3 03:03:00'
    Address:
      type: object
      properties:
        id:
          type: integer
          example: 3
        address:
          type: string
          example: '204, sholoshohor'
        city:
          type: string
          example: chittagong
        state:
          type: string
          example: chittagong
        pinCode:
          type: integer
          example: 4333
    ContactInfo:
      type: object
      properties:
        phone1:
          type: string
          example: +8801000000000
    Success:
      type: boolean
      example: true
    Failure:
      type: boolean
      example: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
